// main.go (Modified Handler)

// ... (omitted code)

// =========================================================================
// START: NEW UNAUTHENTICATED ENDPOINT BLOCK (Must use 'router.GET')
// =========================================================================
// --- Latest Review Submissions Endpoint (Unauthenticated) ---
// GET /api/latest/review-submissions/:project?limit=50&offset=0&sort=submitted_at_utc desc 
router.GET("/api/latest/review-submissions/:project", func(c *gin.Context) {
    // 1. Get and Validate Path/Query Parameters
    project := strings.TrimSpace(c.Param("project"))

    if project == "" {
        c.JSON(http.StatusBadRequest, gin.H{"error": "project is required in the path"})
        return
    }

    limitStr := c.DefaultQuery("limit", "50")
    offsetStr := c.DefaultQuery("offset", "0")
    
    // --- NEW: Get optional sort parameter ---
    sortParam := c.Query("sort") // Get the value of the 'sort' query parameter
    // ----------------------------------------

    limit, err := strconv.Atoi(limitStr)
    if err != nil || limit < 0 {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid 'limit' value"})
        return
    }
    offset, err := strconv.Atoi(offsetStr)
    if err != nil || offset < 0 {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid 'offset' value"})
        return
    }

    // 2. Call the Repository method 
    // You would need to update ListLatestSubmissions to accept the sort parameter.
    // Assuming a modified repository method:
    out, err := reviewInfoRepository.ListLatestSubmissions(gormDB, project, limit, offset, sortParam) 
    
    // ... (rest of the handler remains the same)
})
// ... (omitted code)
